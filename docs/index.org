

#+OPTIONS: toc:2          (only include two levels in TOC)
#+HTML_HEAD_EXTRA: <style>pre.src, pre.src-C {font-family: "Roboto Mono", Courier, monospace; font-weight:300; background-color: #303030; color: #e5e5e5;}</style>
#+HTML_HEAD_EXTRA: <style>body {font-family: "Cambria", "Georgia", sans-serif; }</style>

#+HTML_HEAD_EXTRA: <style> body {padding: 100px; width: 1000px; margin: auto; text-align: left;font-weight: 300; font-family: 'Open Sans', sans-serif; color: #121212; }
#+HTML_HEAD_EXTRA: <style> h1, h2, h3, h4 { font-family: 'Source Sans Pro', sans-serif;}
#+HTML_HEAD_EXTRA: <style> code1 { background-color: #ffd100; border-radius: 3px; font-family: courier, monospace; padding: 0 3px;} </style>



#+OPTIONS:   num:nil

#+INCLUDE: /Users/heeh/Projects/org-macros/org-macros.setup
#+TITLE: Pathtracer++: GPU-Enabled Pathtracer
#+Author: Hee Hwang
#+Date: <2020-07-31 Fri>

* Title, Summary and Team Members
  This project improves the performance of the previous raytracing projects written in OpenGL. This project utilizes modern GPU
  technology and significantly shorten the rendering time. This is an individual project.

* Problem Description
  The problem of the previous OpenGL based raytracer is that it only uses CPUs whose performance is capped on the limited number of cores.  A simple global illumination rendering takes several minutes, and this could be problematic when rendering complex scenes.  Currently, all logics in the previous project assume we use
  CPUs. This means a fair amount of code must be optimized and rewritten. I will implement a vanilla raytracer using the previous project, 
  /PathTracer[fn:1],/ and /Apple Metal Performance Shader[fn:2]/. In a
  nutshell, I will optimize and rewrite raytracing logics that push the GPU to its maximum limit.

* Goals and Deliverables
** Global illumination that supports GPU processing
   Apple Metal Shader requires us to write code in either objective-c
   or swift, which means that I have to implement a path tracer from scratch. I will use OpenGL if this plan is not feasible in the given timeline.

** Parallel logic implementation 
   In the previous project, we process pixels by pixels to compute the spectrum on the pixel. This is an iterative process, and I will setup BVH as a readable GPU buffer. The tricky part is to remove recursion in global illumination. This is something that I need to figure out later.

** Performance Comparison
   I will present the performance of the program by measuring the rendering speedup and memory usage with increasing complexity. A
   table and chart will be provided.

** Additional Shaders using Different Lighting
   After improving the path tracer, I want to change lighting using different shaders.
   This is something that I hope to deliver at the end of the semester.

* Schedule
  - Week1(8/1/2020 - 8/7/2020): Implement vanilla path tracer without GPU acceleration
  - Week2(8/8/2020 - 8/14/2020): Add parallel logic, measure performance, and implement additional lighting

* Resources
** Computing platform
   - Macbook Pro(2019) 
   - CPU: 2.6 GHz 6-Core Intel Core i7 
   - RAM: 16 GB 2667 MHz DDR4 
   - GPU: AMD Radeon Pro 5300M 4 GB
** Online materials
   - OpenGL Pathtracer Implemetation https://cal-cs184-student.github.io/p3-1-pathtracer-su20-heeh/
   - Apple Metal Shader https://developer.apple.com/documentation/metalperformanceshaders/metal_for_accelerating_ray_tracing

[fn:1] https://cal-cs184-student.github.io/p3-1-pathtracer-su20-heeh/
[fn:2] https://developer.apple.com/documentation/metalperformanceshaders/metal_for_accelerating_ray_tracing
